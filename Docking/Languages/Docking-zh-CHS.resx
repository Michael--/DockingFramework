<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LANGUAGE_NAME" xml:space="preserve">
    <value>中文</value>
  </data>
  <data name="MENU.Activities" xml:space="preserve">
    <value>处理器线程</value>
  </data>
  <data name="MENU.Command Line" xml:space="preserve">
    <value>命令</value>
  </data>
  <data name="MENU.Component List" xml:space="preserve">
    <value>组件列表</value>
  </data>
  <data name="MENU.Delete Current Layout" xml:space="preserve">
    <value>删除当前布局</value>
  </data>
  <data name="MENU.File" xml:space="preserve">
    <value>文件</value>
  </data>
  <data name="MENU.Infrastructure" xml:space="preserve">
    <value>基础设施</value>
  </data>
  <data name="MENU.Language" xml:space="preserve">
    <value>语言</value>
  </data>
  <data name="MENU.Layout" xml:space="preserve">
    <value>布局</value>
  </data>
  <data name="MENU.Localization Editor" xml:space="preserve">
    <value>翻译编辑器</value>
  </data>
  <data name="MENU.Message" xml:space="preserve">
    <value>信息</value>
  </data>
  <data name="MENU.Messages" xml:space="preserve">
    <value>信息</value>
  </data>
  <data name="MENU.New Layout..." xml:space="preserve">
    <value>新布局...</value>
  </data>
  <data name="MENU.Open..." xml:space="preserve">
    <value>打开...</value>
  </data>
  <data name="MENU.Properties" xml:space="preserve">
    <value>属性</value>
  </data>
  <data name="MENU.Quit" xml:space="preserve">
    <value>退出</value>
  </data>
  <data name="MENU.Script Editor" xml:space="preserve">
    <value>脚本编辑器</value>
  </data>
  <data name="Docking.Components.US name" xml:space="preserve">
    <value>美国名</value>
  </data>
  <data name="Docking.Components.Translate" xml:space="preserve">
    <value>翻译</value>
  </data>
  <data name="Docking.Components.Status" xml:space="preserve">
    <value>状态</value>
  </data>
  <data name="Docking.Components.Script Editor" xml:space="preserve">
    <value>脚本编辑器</value>
  </data>
  <data name="Docking.Components.Save" xml:space="preserve">
    <value>节省</value>
  </data>
  <data name="Docking.Components.Properties" xml:space="preserve">
    <value>属性</value>
  </data>
  <data name="Docking.Components.Messages" xml:space="preserve">
    <value>消息</value>
  </data>
  <data name="Docking.Components.Localization Editor" xml:space="preserve">
    <value>翻译编辑器</value>
  </data>
  <data name="Docking.Components.Key" xml:space="preserve">
    <value>识别码</value>
  </data>
  <data name="Docking.Components.Instances" xml:space="preserve">
    <value>存在</value>
  </data>
  <data name="Docking.Components.Description" xml:space="preserve">
    <value>描述</value>
  </data>
  <data name="Docking.Components.Current name" xml:space="preserve">
    <value>现有名称</value>
  </data>
  <data name="Docking.Components.Component List" xml:space="preserve">
    <value>组件列表</value>
  </data>
  <data name="Docking.Components.Component" xml:space="preserve">
    <value>元件</value>
  </data>
  <data name="Docking.Components.Command Line" xml:space="preserve">
    <value>命令</value>
  </data>
  <data name="Docking.Components.Changes: {0}" xml:space="preserve">
    <value>变化：{0}</value>
  </data>
  <data name="Docking.Components.Cancel Activity" xml:space="preserve">
    <value>停止</value>
  </data>
  <data name="Docking.Components.Activity" xml:space="preserve">
    <value>处理器线程</value>
  </data>
  <data name="Docking.Components.Activities" xml:space="preserve">
    <value>处理器线程</value>
  </data>
  <data name="Docking.Components.Overwrite value with new translation?" xml:space="preserve">
    <value>难道你真的想保存一个新的翻译？</value>
  </data>
  <data name="Docking.Components.Sure to translate all empty resources?" xml:space="preserve">
    <value>你想填补所有未本地化的字符串自动翻译的GoogleTranslate？</value>
  </data>
  <data name="Docking.Components.Translate All" xml:space="preserve">
    <value>全部翻译</value>
  </data>
  <data name="Docking.Components.Cancel" xml:space="preserve">
    <value>停止</value>
  </data>
  <data name="Docking.Components.Choose a file to open..." xml:space="preserve">
    <value>选择要打开的文件...</value>
  </data>
  <data name="Docking.Components.Create Folder" xml:space="preserve">
    <value>创建文件夹</value>
  </data>
  <data name="Docking.Components.File {0} does not exist" xml:space="preserve">
    <value>文件{0}不存在</value>
  </data>
  <data name="Docking.Components.Open" xml:space="preserve">
    <value>打开</value>
  </data>
  <data name="Docking.Components.Opening file {0} as {1}..." xml:space="preserve">
    <value>打开文件 {0} 类型 {1}...</value>
  </data>
  <data name="Docking.Components.Opening whole directories like {0} currently isn't implemented" xml:space="preserve">
    <value>文件夹无法打开 {0}</value>
  </data>
  <data name="Docking.Components.Path" xml:space="preserve">
    <value>路径</value>
  </data>
  <data name="MENU.Clear" xml:space="preserve">
    <value>清除</value>
  </data>
  <data name="MENU.Copy" xml:space="preserve">
    <value>复制</value>
  </data>
  <data name="MENU.Cut" xml:space="preserve">
    <value>剜</value>
  </data>
  <data name="MENU.Delete" xml:space="preserve">
    <value>删除</value>
  </data>
  <data name="MENU.Paste" xml:space="preserve">
    <value>插入</value>
  </data>
  <data name="MENU.Select All" xml:space="preserve">
    <value>全选</value>
  </data>
  <data name="Docking.Components.gtk-cancel" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="Docking.Components.gtk-close" xml:space="preserve">
    <value>关闭</value>
  </data>
  <data name="Docking.Components.gtk-no" xml:space="preserve">
    <value>无</value>
  </data>
  <data name="Docking.Components.gtk-ok" xml:space="preserve">
    <value>行</value>
  </data>
  <data name="Docking.Components.gtk-yes" xml:space="preserve">
    <value>是的</value>
  </data>
  <data name="Docking.Components.All Files" xml:space="preserve">
    <value>所有文件</value>
  </data>
  <data name="Docking.Components.All Known File Types" xml:space="preserve">
    <value>所有已知的文件类型</value>
  </data>
  <data name="Docking.Components.Select" xml:space="preserve">
    <value>选择</value>
  </data>
  <data name="Docking.Components.Could not find any component which can handle file '{0}'" xml:space="preserve">
    <value>没有计划的一部分，发现可以打开该文件
'{0}'</value>
  </data>
  <data name="MENU.Edit" xml:space="preserve">
    <value>编辑</value>
  </data>
  <data name="MENU.View" xml:space="preserve">
    <value>窗</value>
  </data>
</root>